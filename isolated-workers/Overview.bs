<pre class='metadata'>
Title:  Isolated Workers Level 1
Status: DREAM
Group: houdini
ED: https://drafts.css-houdini.org/isolated-workers-1/
Shortname: isolated-workers
Level: 1
Abstract:  This specification defines an API for running scripts in stages of the rendering pipeline independent of the main javascript execution environment.
Editor: Ian Kilpatrick, ikilpatrick@chromium.org
</pre>

<pre class="anchors">
urlPrefix: https://fetch.spec.whatwg.org/; type: dfn;
    text: ok status
    urlPrefix: #concept-response-;
        text: body
        text: status
urlPrefix: https://html.spec.whatwg.org/multipage/workers.html; type: dfn;
    text: DedicatedWorkerGlobalScope
    text: get a fetch result
    text: import scripts into worker global scope
    text: importing scripts and libraries
    text: postprocess the fetch result
    text: validate the state
    text: web workers
    urlPrefix: #dom-workerglobalscope-;
        text: self
urlPrefix: https://html.spec.whatwg.org/multipage/webappapis.html; type: dfn;
    text: create a script
    text: document environment
    text: environment settings object
urlPrefix: https://html.spec.whatwg.org/multipage/infrastructure.html; type: dfn;
    text: in parallel
    text: javascript global environment
    text: unsafe response
urlPrefix: https://www.w3.org/2001/tag/doc/promises-guide; type: dfn;
    text: a new promise
urlPrefix: http://www.ecma-international.org/ecma-262/6.0/#sec-; type: dfn;
    text: strict mode code
</pre>

Introduction {#intro}
=====================

Motivations {#motivations}
--------------------------

<em>This section is not normative.</em>

Rendering engines for web pages have been built assuming that there is no user defined script run in the middle of a rendering phase.

Due to this allowing extension points defined in the <a>document environment</a>
is difficult, as rendering engines would need to abandon previously held assumptions for what could happen in the middle of a phase.

For example, during the layout phase the rendering engine assumes that no DOM will be modified.

Additionally defining extension points in the <a>document environment</a>
would restrict rendering engines to performing work in the same thread as the <a>document environment</a>.
(Unless rendering engines added complex, high-overhead infrastructure to allow thread-safe APIs in addition to thread joining guarantees).

The isolated worker is designed to allow such extension points in rendering engines, while keeping guarantees which rendering engines rely currently on.

Isolated workers are similar to <a>web workers</a> however they:
 - Are thread-agnostic. That is, they are not defined to run on a particular thread. Rendering engines may run them wherever they choose.
 - Are able to have multiple duplicate instances created for the purpose of parallelism.
 - Are not event API based. Instead callbacks are registered on the global scope, to be invoked by the user agent.
 - Have a reduced API surface on the <a>javascript global environment</a> (global scope).
 - Have a lifetime tied to running a callback or set of callbacks.

As isolated workers have a relatively high overhead, they should be used sparingly. Due to this isolated workers are expected to be shared between separate scripts.
This is similar to the <a>document environment</a>.

Code Idempotency {#code-idempotency}
------------------------------------

<em>This section is not normative.</em>

Multiple instances of {{IsolatedWorkerGlobalScope}} can be created for each {{IsolatedWorker}} that they belong to.
User agents may choose to do this in order to parallelize work over multiple threads, or to move work between threads as required.

Additionally different user agents <em>may</em> invoke a callbacks in a different order to other user agents.

Due to this, in order to prevent this compatibility risk between user agents, authors who register callbacks on the global scope should make their code idempotent.
That is, a callback or set of callbacks should produce the same output given a particular input.

The following techniques <em>may</em> be used in order to encourage authors to write code in an idempotent way:
 - No reference to the global object, e.g. <a>self</a> on a <a>DedicatedWorkerGlobalScope</a>.
 - Code is loaded similar to how ES6 Modules are loaded, in <a>strict mode code</a> inside an anonymous function.
    This prevents two different scripts sharing state by referencing shared objects on the global scope.
 - User agents <em>may</em> choose to always have at least two {{IsolatedWorkerGlobalScope}}'s per {{IsolatedWorker}} and
    randomly assign a callback or set of callbacks to a particular global scope.
 - User agents <em>may</em> create and destroy {{IsolatedWorkerGlobalScope}}'s at any time.

Infrastructure {#infrastructure}
================================

The Global Scope {#the-global-scope}
------------------------------------

<pre class='idl'>
interface IsolatedWorkerGlobalScope {
};
IsolatedWorkerGlobalScope implements WindowBase64;
</pre>

The IsolatedWorkerGlobalScope has a limited global scope when compared to a <a>DedicatedWorkerGlobalScope</a>.

Issue(w3c/css-houdini-drafts#15): Add console API to {{IsolatedWorkerGlobalScope}} when it exists.

The Event Loop {#the-event-loop}
--------------------------------

Lifetime of the Isolated Worker {#lifetime-of-the-isolated-worker}
------------------------------------------------------------------

Processing Model {#processing-model}
------------------------------------

IsolatedWorker {#isolatedworker}
--------------------------------

<pre class='idl'>
interface IsolatedWorker {
    [NewObject] Promise&lt;void&gt; importScripts(DOMString... urls);
};
</pre>

When the <dfn method for=IsolatedWorker>importScripts(urls)</dfn> method is called on an {{IsolatedWorker}} object, the user agent <em>must</em> run the following steps:
 1. Let <em>promise</em> be <a>a new promise</a>.
 2. Run the following steps <a>in parallel</a>:
    1. For each {{IsolatedWorkerGlobalScope}} associated with the {{IsolatedWorker}} run these substeps:
        1. Run <a>import scripts into worker global scope</a> with the following options:
            - To <a>validate the state</a>, the user agent <em>must</em> do nothing.
            - To <a>get a fetch result</a>, the user agent <em>must</em> run the steps defined in <a>importing scripts and libraries</a>.
            - To <a>postprocess the fetch result</a>, the user agent <em>must</em> run the following steps:
                1. If the <em>response</em>'s <a>status</a> is not an <a>ok status</a> then abort all these steps.
                2. If the <em>response</em>'s <a>body</a> is null then abort all these steps.
                3. Let <em>source</em> be the result of running the UTF-8 decode algorithm on <em>response</em>'s <a>unsafe response</a>'s <a>body</a>.
                    <br>Let <em>language</em> be JavaScript.
                4. <a>Create a script</a> using <em>source</em> as the script source, the URL from which <em>source</em> was obtained, <em>language</em> as the scripting language,
                    and <em>settings object</em> as the <a>environment settings object</a>.
                5. If the newly created <em>script</em> fails to parse then abort all these steps.
                6. Prepend the string <code class='lang-javascript'>(function() {'use strict';</code> to the <em>response</em>'s <a>unsafe response</a>'s <a>body</a>.
                    <br>Append the string <code class='lang-javascript'>})();</code> to the <em>response</em>'s <a>unsafe response</a>'s <a>body</a>.
    2. If <em>all</em> the steps above succeeded (in particular, if all of the scripts were loaded into their global scope), resolve <em>promise</em>
        <br>Otherwise, reject <em>promise</em>.
 2. Return <em>promise</em>.

Issue(w3c/css-houdini-drafts#47): Need ability to load code into {{IsolatedWorkerGlobalScope}} declaratively.

Examples {#examples}
====================

For these examples we'll use a mock isolated worker on window.

<pre class='idl'>
partial interface Window {
  [SameObject] readonly attribute IsolatedWorker mockWorker1;
  [SameObject] readonly attribute IsolatedWorker mockWorker2;
};
</pre>

Loading scripts into an isolated worker. {#example-single}
----------------------------------------------------------
<pre class='lang-javascript'>
window.mockWorker1.importScripts('script1.js');
window.mockWorker1.importScripts('script2.js', 'script3.js');

// Assuming no other calls to mockWorker1 valid script loading orderings are:
// 1. 'script1.js', 'script2.js', 'script3.js'
// 2. 'script2.js', 'script3.js', 'script1.js'
</pre>

Loading scripts into multiple isolated workers. {#example-multiple}
-------------------------------------------------------------------
<pre class='lang-javascript'>
Promise.all([
    window.mockWorker1.importScripts('script1.js'),
    window.mockWorker2.importScripts('script2.js')
]).then(function() {
    // Both scripts now have loaded code, can do something which relies on this.
});
</pre>
