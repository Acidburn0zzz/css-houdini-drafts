<pre class='metadata'>
Title:  Processors Level 1
Status: DREAM
Group: houdini
ED: https://drafts.css-houdini.org/processors/
Shortname: processors
Level: 1
Abstract:  This specification defines an API for running scripts in stages of the rendering pipeline independent of the main javascript execution environment.
Editor: Ian Kilpatrick, ikilpatrick@chromium.org
</pre>

<pre class="anchors">
urlPrefix: https://fetch.spec.whatwg.org/; type: dfn;
    text: ok status
    urlPrefix: #concept-response-;
        text: body
        text: status
urlPrefix: https://html.spec.whatwg.org/multipage/browsers.html; type: dfn;
    text: effective script origin
    url: #origin-2; text: origin
urlPrefix: https://html.spec.whatwg.org/multipage/workers.html; type: dfn;
    text: get a fetch result
    text: import scripts into worker global scope
    text: importing scripts and libraries
    text: postprocess the fetch result
    text: validate the state
    text: web workers
    urlPrefix: #dom-workerglobalscope-;
        text: self
urlPrefix: https://html.spec.whatwg.org/multipage/webappapis.html; type: dfn;
    text: api base url
    text: api url character encoding
    text: code entry-point
    text: create a script
    text: document environment
    text: environment settings object
    text: event loop
    text: global object
    text: incumbent settings object
    text: responsible browsing context
    text: responsible document
    text: responsible event loop
    text: script execution environment
urlPrefix: https://html.spec.whatwg.org/multipage/infrastructure.html; type: dfn;
    text: in parallel
    text: javascript global environment
    text: unsafe response
    text: utf-8 decode
    urlPrefix: #js-;
        text: syntaxerror;
    url: resolve-a-url; text: resolve;
urlPrefix: https://www.w3.org/2001/tag/doc/promises-guide; type: dfn;
    text: a new promise
urlPrefix: http://www.ecma-international.org/ecma-262/6.0/#sec-; type: dfn;
    text: Construct
    text: FunctionCreate
    text: Invoke
    text: NewObjectEnvironment
    text: strict mode code
    url: function-definitions; text: FunctionBody;
</pre>

Introduction {#intro}
=====================

Motivations {#motivations}
--------------------------

<em>This section is not normative.</em>

Allowing extension points defined in the <a>document environment</a>
is difficult, as rendering engines would need to abandon previously held assumptions for what could happen in the middle of a phase.

For example, during the layout phase the rendering engine assumes that no DOM will be modified.

Additionally defining extension points in the <a>document environment</a>
would restrict rendering engines to performing work in the same thread as the <a>document environment</a>.
(Unless rendering engines added complex, high-overhead infrastructure to allow thread-safe APIs in addition to thread joining guarantees).

The processor is designed to allow such extension points in rendering engines, while keeping guarantees which rendering engines rely currently on.

Processors are similar to <a>web workers</a> however they:
 - Are thread-agnostic. That is, they are not defined to run on a particular thread. Rendering engines may run them wherever they choose.
 - Are able to have multiple duplicate instances of the global scope created for the purpose of parallelism.
 - Are not event API based. Instead classes are registered on the global scope, whose methods are to be invoked by the user agent.
 - Have a reduced API surface on the <a>javascript global environment</a> (global scope).
 - Have a lifetime tied to running a method or set of methods on a class.

As processors have a relatively high overhead, they should be used sparingly. Due to this processors are expected to be shared between separate scripts.
This is similar to the <a>document environment</a>.

Code Idempotency {#code-idempotency}
------------------------------------

<em>This section is not normative.</em>

Multiple instances of {{ProcessorGlobalScope}} can be created for each {{Processor}} that they belong to.
User agents may choose to do this in order to parallelize work over multiple threads, or to move work between threads as required.

Additionally different user agents may invoke a method on a class in a different order to other user agents.

Due to this, in order to prevent this compatibility risk between user agents, authors who register classes on the global scope should make their code idempotent.
That is, a method or set of methods on a class should produce the same output given a particular input.

The following techniques should be used in order to encourage authors to write code in an idempotent way:
 - No reference to the global object, e.g. <a>self</a> on a {{DedicatedWorkerGlobalScope}}.
 - Code is loaded similar to how ES6 Modules are loaded, in <a>strict mode code</a> inside an anonymous function.
    This prevents two different scripts sharing state by referencing shared objects on the global scope.
 - User agents may choose to always have at least two {{ProcessorGlobalScope}}s per {{Processor}} and
    randomly assign a method or set of methods on a class to a particular global scope.
 - User agents may create and destroy {{ProcessorGlobalScope}}s at any time.

Infrastructure {#infrastructure}
================================

The Global Scope {#the-global-scope}
------------------------------------

The {{ProcessorGlobalScope}} object represents the global execution context of a {{Processor}}.

<pre class='idl'>
interface ProcessorGlobalScope {
};
ProcessorGlobalScope implements WindowBase64;
</pre>

A {{ProcessorGlobalScope}} has an associated <a>environment settings object</a> <b>settings object</b>.

Note:
    The {{ProcessorGlobalScope}} has a limited global scope when compared to a {{DedicatedWorkerGlobalScope}}.
    It is expected that other specifications will extend {{ProcessorGlobalScope}} with <code class='lang-javascript'>registerAClass</code> methods which
    will allow authors to register classes for the user agent create and invoke methods on.

Issue(w3c/css-houdini-drafts#15): Add console API to {{ProcessorGlobalScope}} when it exists.

### Initializing a ProcessorGlobalScope ### {#initializing-a-processorglobalscope}

When a user agent is to <dfn>initialize a {{ProcessorGlobalScope}}</dfn>, for a given |processorGlobalScope| and |processor|, it <em>must</em> run the following steps:
    1. Let |workerEventLoop| be a new <a>event loop</a>.

        Let |inheritedResponsibleBrowsingContext| be the <a>responsible browsing context</a> specified by the <a>incumbent settings object</a>.

        Let |inheritedAPIBaseURL| be the <a>API base URL</a> specified by the <a>incumbent settings object</a>.

        Let |inheritedOrigin| be the <a>origin</a> specified by the <a>incumbent settings object</a>.

    2. Let |settingsObject| be a new environment settings object whose algorithms are defined as follows:
        : The <a>script execution environments</a>:
        :: When the <a>environment settings object</a> is created, for each language supported by the user agent, create an appropriate execution environment as defined by the relevant specification.
        :: When a <a>script execution environment</a> is needed, return the appropriate one from those created when the <a>environment settings object</a> was created.

        : The <a>global object</a>:
        :: Return |processorGlobalScope|.

        : The <a>responsible browsing context</a>:
        :: Return |inheritedResponsibleBrowsingContext|.

        : The <a>responsible event loop</a>:
        :: Return |workerEventLoop|.

        : The <a>responsible document</a>:
        :: Not applicable (the responsible event loop is not a browsing context event loop).

        : The <a>API URL character encoding</a>:
        :: Return UTF-8.

        : The <a>API base URL</a>:
        :: Return |inheritedAPIBaseURL|.

        : The <a>origin</a> and <a>effective script origin</a>:
        :: Return |inheritedOrigin|.

    3. Associate the |settingsObject| with |processorGlobalScope|.

    4. For each |script| in the given |processor|'s <b>processor's loaded scripts</b> run the |script| in the |processorGlobalScope|.

Processor {#processor-section}
------------------------------

The {{Processor}} object provides the capability to import scripts into its associated {{ProcessorGlobalScope}}s. The user agent can then create classes registered
on the {{ProcessorGlobalScope}}s and invoke their methods.

<pre class='idl'>
interface Processor {
    [NewObject] Promise&lt;void&gt; importScripts(DOMString... urls);
};
</pre>

A {{Processor}} has a list of the <b>processor's {{ProcessorGlobalScope}}s</b>. Initially this list is empty; it is populated when the user agent chooses to create its {{ProcessorGlobalScope}}.

A {{Processor}} has a list of the <b>processor's loaded scripts</b>. Initially this list is empty; it is populated when scripts are fetched and parsed.

When the <dfn method for=Processor>importScripts(urls)</dfn> method is called on a {{Processor}} object, the user agent <em>must</em> run the following steps:
 1. Let |promise| be <a>a new promise</a>.
 2. Run the following steps <a>in parallel</a>:
    1. Let |settingsObject| be the <a>incumbent settings object</a>.
    2. If there are no arguments, return without doing anything. Abort these steps.
    3. <a>Resolve</a> each argument relative to settings object's <a>API base URL</a>.
    4. If any fail, throw a SyntaxError</a> exception and abort these steps.
    5. For each URL in the resulting absolute URLs, run these substeps:
        1. Let response be the result of <a>get a fetch result</a>, given |url| and |settingsObject|.
        2. Let |source| be the result of running the <a>UTF-8 decode</a> algorithm on response's <a>unsafe response</a>'s <a>body</a>.
        3. Let |script| be the result of running <a>create an isolated script</a> using |source| as the script source, the <a>URL</a> from which source was obtained, and |settingsObject| as the environment settings object.

            Parse the newly created |script|. If it failed to parse, then reject the |promise| and abort all these steps.

        4. Add |script| to the list of the <b>processor's loaded scripts</b>.
    6. For each {{ProcessorGlobalScope}} in the <b>processor's {{ProcessorGlobalScope}}s</b>, run these substeps.
        1. For each newly created |script| in <b>processor's loaded scripts</b> run the script in the {{ProcessorGlobalScope}}.
    7. If <em>all</em> the steps above succeeded (in particular, if all of the scripts parsed and loaded into the global scopes), resolve |promise|
        <br>Otherwise, reject |promise|.
 3. Return |promise|.

Issue(w3c/css-houdini-drafts#51): What should happen when a script throws an exception while executing for the first time?

Issue(w3c/css-houdini-drafts#52): Is importScripts the right API call? Should it be singular instead?

When a user agent is to <dfn>create an isolated script</dfn> given some |scriptSource|, an <a>environment settings object</a>,
it must run the following steps:
    1. Let |script| be a new script that this algorithm will subsequently initialise.
    2. Obtain the appropriate <a>script execution environment</a> for the given scripting language from the <a>environment settings object</a> provided.
    3. Let |kind| be Normal.

        Let |parameterList| be an empty list.

        Let |parsedBodySource| be the result of parsing |scriptSource| as a <a>FunctionBody</a> using the <a>script execution environment</a>.

        Let |strict| be true.

        Let |scope| be the result of <a>NewObjectEnvironment</a>(O=<em>null</em>, E=<em>the global environment</em>).
    4. Let |function| be the result of <a>FunctionCreate</a>(kind=|kind|, ParameterList=|parameterList|, Body=|parsedBodySource|, Scope=|scope|, Strict=|strict|).
    5. Let |script|'s <a>code entry-point</a> be |function|.
    6. Return |script|.

Issue(w3c/css-houdini-drafts#47): Need ability to load code into {{ProcessorGlobalScope}} declaratively.

Issue: TODO write initialization for Processor.

Lifetime of the Processor {#lifetime-of-the-processor}
------------------------------------------------------

The lifetime of a {{Processor}} is tied to the object it belongs to, for example the {{Window}}.

The lifetime of a {{ProcessorGlobalScope}} is tied to the execution lifetime of a method or set of methods on a class, not to the lifetime of the {{Processor}} object.

The user agent <em>may</em> terminate a {{ProcessorGlobalScope}} at any time it has no callbacks to handle or detects abnormal operation such as infinite loops and
callbacks exceeding imposed time limits.

Issue(w3c/css-houdini-drafts#53): Worth adding dispose to classes to allow clean-up?

Processing Model {#processing-model}
------------------------------------

The <a>invoke a method on a class inside a {{Processor}}</a> has two hooks for algorithm steps that may be customized by any callers:
    - <dfn export>create a processor global scope</dfn>
    - <dfn export>lookup a class instance on a processor global scope</dfn>

When a user agent is to <dfn export>invoke a method on a class inside a {{Processor}}</dfn> given a |methodPropertyKey|, some |arguments|, 
it must run the following steps:

    1. Let |processorGlobalScope| be a {{ProcessorGlobalScope}} from the list of the <b>processor's {{ProcessorGlobalScope}}s</b>.

        If none exist or a new {{ProcessorGlobalScope}} is required, the user agent <em>must</em> run the following substeps:
            1. Let |processorGlobalScope| be the result of <a>create a processor global scope</a>.
            2. <a>Initialize a {{ProcessorGlobalScope}}</a>, given |processorGlobalScope| and |processor|.
            3. Add |processorGlobalScope| to the |processor|'s list of the <b>processor's {{ProcessorGlobalScope}}s</b>.

    2. Let |classInstance| be the result of <a>lookup a class instance on a processor global scope</a> given |processorGlobalScope|.
    3. Let |result| be the result of <a>Invoke</a>(O=|classInstance|, P=|methodPropertyKey|, Arguments=|arguments|).
    4. Return |result|.

Note: It is up to the user agent to select a appropriate {{ProcessorGlobalScope}} to invoke the method in.

Examples {#examples}
====================

<em>This section is not normative.</em>

For these examples we'll use a fake processor on window.

<pre class='idl'>
partial interface Window {
  [SameObject] readonly attribute Processor fakeProcessor1;
  [SameObject] readonly attribute Processor fakeProcessor2;
};
</pre>

<pre class='idl'>
callback Function = any (any... arguments);

interface FakeProcessorGlobalScope : ProcessorGlobalScope {
    void registerAnArbitaryClass(DOMString type, Function classConstructor);
};
</pre>

Each {{FakeProcessorGlobalScope}} has a map of the <b>registered class constructors</b>.

When the <dfn method for=FakeProcessorGlobalScope>registerAnArbitaryClass(type, classConstructor)</dfn> method is called,
the user agent will add the <em>classConstructor</em> of <em>type</em> to the map of <b>registered class constructors</b>.


Loading scripts into a processor. {#example-single}
---------------------------------------------------

<pre class='lang-javascript'>
window.fakeProcessor1.importScripts('script1.js');
window.fakeProcessor1.importScripts('script2.js', 'script3.js');

// Assuming no other calls to fakeProcessor1 valid script loading orderings are:
// 1. 'script1.js', 'script2.js', 'script3.js'
// 2. 'script2.js', 'script3.js', 'script1.js'
</pre>

Loading scripts into multiple processors. {#example-multiple}
-------------------------------------------------------------

<pre class='lang-javascript'>
Promise.all([
    window.fakeProcessor1.importScripts('script1.js'),
    window.fakeProcessor2.importScripts('script2.js')
]).then(function() {
    // Both scripts now have loaded code, can do a task which relies on this.
});
</pre>

Create a registered class and invoke a method. {#example-class}
---------------------------------------------------------------

<pre class='lang-javascript'>
// Inside FakeProcessorGlobalScope
registerAnArbitaryClass('foo', class FooClass {
    process(arg) {
        return !arg;
    }
});
</pre>

When the user agent wants to invoke <b>process</b> on an instance of class with key <b>foo</b> it will:
    1. Call <a>invoke a method on a class inside a {{Processor}}</a> given <b>process</b> as the |methodPropertyKey| and some |arguments| with the following options:
        - To <a>create a processor global scope</a> the user agent will:

            Return a new {{FakeProcessorGlobalScope}}.
        - To <a>lookup a class instance on a processor global scope</a> given a |processorGlobalScope|, the user agent will:
            1. Let |classConstructor| be the result of looking up <b>foo</b> on the |processorGlobalScope|'s map of <b>registered class constructors</b>.
            2. Return the result of <a>Construct</a>(|classConstructor|).
