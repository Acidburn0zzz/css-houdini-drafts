<pre class='metadata'>
Title:  CSS Properties and Values API Level 1
Status: DREAM
Group: houdini
ED: https://drafts.css-houdini.org/css-properties-values-api-1/
Shortname: css-properties-values-api
Level: 1
Abstract: This CSS module defines an API for registering new CSS properties. Properties registered using this API are provided with a parse syntax that defines a type, inheritance behaviour, and an initial value.
Editor: Tab Atkins, jackalmage@gmail.com
Editor: Shane Stephens, shanestephens@google.com
Editor: Daniel Glazman, daniel.glazman@disruptive-innovations.com
Editor: Alan Stearns, stearns@adobe.com
Editor: Elliot Sprehn, esprehn@chromium.org
Editor: Greg Whitworth, gwhit@microsoft.com
Ignored Terms: boolean, Animatable, Map, Context, isolated worker, SyntaxError,
Ignored Terms: InvalidModificationError, NotFoundError, StylePropertyMapReadOnly,
Ignored Terms: worklet global scope
Ignored Terms: throw, NotSupportedError, isconstructor, get, iscallable,
Ignored Terms: construct, name map of inputs
Ignored Vars: arguments, methodPropertyKey, inputStyleMap, workletGlobalScope
Ignored Terms: WorkletGlobalContext
Repository: w3c/css-houdini-drafts
</pre>

<pre class='biblio'>
{
  "css-paint-api": {
    "title": "CSS Painting API"
  },
  "css-layout-api": {
    "title": "CSS Layout API"
  }
}
</pre>

Introduction {#intro}
=====================

CSS defines a comprehensive set of properties that can be manipulated in order
to modify the layout, paint, or behaviour of a web document. However, web authors
frequently wish to extend this set with additional properties.

[[css-variables]] provides primitive means for defining user-controlled properties,
however these properties always take token lists as values, must always inherit, and
can only impact document layout or paint by being re-incorporated into the value
of other properties via a var() reference.

This specification extends [[css-variables]], allowing the registration of properties
that have a value type, an initial value, and a defined inheritance behaviour.

This specification is complementary to [[css-paint-api]] and [[css-layout-api]], which
allow custom properties to directly impact paint and layout behaviours respectively.

Registering custom properties {#registering-custom-properties}
==============================================================

<pre class='idl'>
dictionary PropertyDescriptor {
  DOMString name;
  DOMString syntax;
  boolean   inherits;
  DOMString initialValue;
};

partial interface CSS {
  void registerProperty(PropertyDescriptor descriptor);
  void unregisterProperty(DOMString name);
};
</pre>

The {{PropertyDescriptor}} dictionary {#the-propertydescriptor-dictionary}
--------------------------------------------------------------------------

A <dfn>PropertyDescriptor</dfn> dictionary represents author-specified configuration
options for a custom property. {{PropertyDescriptor}} dictionaries contain the
following members:

:   <dfn dict-member for=PropertyDescriptor>name</dfn>
::  The name of the custom property being defined.

:   <dfn dict-member for=PropertyDescriptor>syntax</dfn>
::  A string representing how this custom property is parsed.

:   <dfn dict-member for=PropertyDescriptor>inherits</dfn>
::  True if this custom property should inherit down the DOM tree; False otherwise.

:   <dfn dict-member for=PropertyDescriptor>initialValue</dfn>
::  The initial value of this custom property.

The {{registerProperty()}} function {#the-registerproperty-function}
--------------------------------------------------------------------

The <dfn method for=CSS>registerProperty(PropertyDescriptor descriptor)</dfn> method
registers a custom property according the to configuration options provided in
<code>descriptor</code>.

Attempting to register properties with a {{PropertyDescriptor/name}} that doesn't
correspond to the <<custom-property-name>> production must cause {{registerProperty()}}
to throw a {{SyntaxError}}.

The list of types supported in the {{PropertyDescriptor/syntax}} member are listed
in <a section href="#supported-syntax-strings"></a>. Currently, only simple
type references are supported. Attempting to register properties with a
{{PropertyDescriptor/syntax}} that is not supported must cause {{registerProperty()}}
to throw a {{SyntaxError}}.

Note: for example, the syntax string could be "&lt;length&gt;" or "&lt;number&gt;".

Note: in future levels we anticipate supporting more sophisticated parse strings, e.g.
"&lt;length&gt; || &lt;number&gt;"

Attempting to call {{registerProperty()}} with an {{PropertyDescriptor/initialValue}} that is
not parseable using the provided {{PropertyDescriptor/syntax}} must cause it to
throw a {{SyntaxError}}.

When a custom property is registered with a given type, the process via which specified
values for that property are turned into computed values is defined
fully by the type selected, as described in
<a section href="#calculation-of-computed-values"></a>.

Note: As defined by [[css3-animations]] and [[css3-transitions]], it is possible to
specify animations and transitions that reference custom properties.

When referenced by animations and transitions, custom properties will interpolate
in a manner defined by their types.
If the start and end of an interpolation have matching types, then they
will interpolate as specified in [[!css3-animations]].
Otherwise, the interpolation falls back to the default 50% flip described in
[[!css3-animations]].

If {{registerProperty()}} is called with a descriptor name that matches an already registered property,
then an {{InvalidModificationError}} is thrown and the re-registration fails.

Properties can be unregistered using
<dfn method for=CSS>unregisterProperty(DOMString name)</dfn>.
If this function is called with a name that doesn't match an existing property
then a {{NotFoundError}} is thrown.

Successful calls to both {{registerProperty()}} and {{unregisterProperty()}}
change the set of registered properties. When the set of registered properties
changes, previously syntactically invalid property values can become valid and vice versa.
This can change the set of <a>declared values</a> which requires the <a>cascade</a> to
be recomputed.

<div class='example'>
By default, all custom property declarations that can be parsed as a sequence of tokens
are valid. Hence, the result of this stylesheet:

<pre class='lang-css'>
.thing {
  --my-color: green;
  --my-color: url("not-a-color"); 
  color: var(--my-color);
}
</pre>

is to set the color property of elements of class "thing" to "inherit".
The second --my-color declaration overrides the first at parse time (both are valid),
and the var reference in the color property is found to be invalid at computation time
(because <code>url("not-a-color")</code> is not a color). At computation time the only
available fallback is the default value, which in the case of color is "inherit".

if we call:

<pre class='lang-javascript'>
registerProperty({
name: "--my-color",
syntax: "&lt;color>"
});
</pre>

then the second --my-color declaration becomes syntactically invalid, which means that
the cascade uses the first declaration. The color therefore switches to green.

</div>

Supported syntax strings {#supported-syntax-strings}
----------------------------------------------------

The following syntax strings are supported:

:   "&lt;length>"
::  Any valid <<length>> value
:   "&lt;number>"
::  <<number>> values
:   "&lt;percentage>"
::  Any valid <<percentage>> value
:   "&lt;length-percentage>"
::  Any valid <<length>> or <<percentage>> value, any valid <<calc()>>
    expression combining <<length>> and <<percentage>> components.
:   "&lt;color>"
::  Any valid <<color>> value
:   "&lt;image>"
::  Any valid <<image>> value
:   "&lt;url>"
::  Any valid <<url>> value
:   "&lt;integer>"
::  Any valid <<integer>> value
:   "&lt;angle>"
::  Any valid <<angle>> value
:   "&lt;time>"
::  Any valid <<time>> value
:   "&lt;resolution>"
::  Any valid <<resolution>> value
:   "&lt;transform-function>"
::  Any valie <<transform-function>> value
:   "&lt;custom-ident>"
::  Any valid <<custom-ident>> value
:   Any string, the contents of which matches the <<ident>> production
::  That string
:   Any one of the preceding strings, followed by '+'
::  A list of values of the type specified by the string
:   Any combination of the preceding, separated by '|'
::  Any value that matches one of the items in the combination, matched in specified order.
:   "*"
::  Any valid token stream

Note: [[css3-values]] maintains a distinction between properties that accept
only a length, and properties that accept both a length and a percentage,
however the distinction doesn't currently cleanly line up with the productions.
Accordingly, this specification introduces the length-percentage production
for the purpose of cleanly specifying this distinction.

Regardless of the syntax specified, all custom properties will accept
<a>CSS-wide keywords</a> as well as ''revert'', and process these values
appropriately.

Note: This does not apply to the {{PropertyDescriptor/initialValue}} member
of the {{PropertyDescriptor}} dictionary.

<div class='example'>
For example, the following are all valid syntax strings.

:   <code>"&lt;length>"</code>
::  accepts length values
:   <code>"&lt;length> | &lt;percentage>"</code>
::  accepts lengths, percentages, percentage calc expressions, and length calc
    expressions, but not calc expressions containing a combination of length
    and percentage values.
:   <code>"&lt;length-percentage>"</code>
::  accepts all values that <code>"&lt;length> | &lt;percentage>"</code> would
    accept, as well as calc expresssions containing a combination of both length
    and percentage values.
:   <code>"big | bigger | BIGGER"</code>
::  accepts the string "big", or the string "bigger", or the string "BIGGER".
:   <code>"&lt;length>+"</code>
::  accepts a list of length values.

</div>

Calculation of Computed Values {#calculation-of-computed-values}
----------------------------------------------------------------

The syntax of a custom property fully determines how computed values are
generated from specified values for that property.

The <a>CSS-wide keywords</a> and ''revert'' generate computed values as
described in [[!css3-values]] and [[!css-cascade-4]] respectively. Otherwise:

For &lt;length> values, the computed value is the absolute length expressed in pixels.

For &lt;custom-ident>, string, &lt;color>, &lt;image>, &lt;url>, &lt;integer>,
&lt;angle>, &lt;time>, &lt;resolution>, &lt;transform-function> or "*" values, the
computed value is identical to the specified value.

For &lt;number> and &lt;percentage> values which are not calc expressions, the
computed value is identical to the specified value. Calc expressions that are
&lt;number> and &lt;percentage> values get reduced during computation to simple
numbers and percentages respectively.

For values specified by a syntax string that include "|" clauses, the computed
value is given by applying the calculation rules for the first clause that
matches to the specified value.

For list values, the computed value is a list of the computed values of the
primitives in the list.

Examples {#examples}
====================

Example 1: Using custom properties to add animation behavior {#example-1}
-------------------------------------------------------------------------

<pre class='lang-markup'>
&lt;script&gt;
document.registerProperty({
  name: "--stop-color",
  syntax: "&lt;color&gt;",
  inherits: false,
  initialValue: "rgba(0,0,0,0)"
});
&lt;/script&gt;

&lt;style&gt;

.button {
  --stop-color: red;
  background: linear-gradient(var(--stop-color), black);
  transition: --stop-color 1s;
}

.button:hover {
  --stop-color: green;
}

&lt;/style&gt;

</pre>
