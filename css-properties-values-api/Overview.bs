<pre class='metadata'>
Title:  CSS Properties and Values API Level 1
Status: DREAM
Group: houdini
ED: http://dev.w3.org/houdini/css-properties-values-api/
Shortname: css-properties-values-api
Level: 1
Abstract: 
Editor: Tab Atkins, jackalmage@gmail.com
Editor: Shane Stephens, shanestephens@google.com
Editor: Daniel Glazman, daniel.glazman@disruptive-innovations.com
Editor: Elliot Sprehn, esprehn@chromium.org
Editor: Greg Whitworth, gwhit@microsoft.com
Ignored Terms: boolean, Animatable, Map, Context 
Repository: w3c/css-houdini-drafts
</pre>

Introduction {#intro}
=====================

Registering custom properties {#registering-custom-properties}
==============================================================

<pre class='idl'>
dictionary PropertyDescriptor {
  DOMString name;
  DOMString syntax;
  boolean   inherits;
  DOMString initialValue;
};

partial interface CSS {
  void registerProperty(PropertyDescriptor descriptor);
  void unregisterProperty(DOMString name);
};
</pre>

Issue: CSS? Document?

:   <dfn dict-member for=PropertyDescriptor>name</dfn>
::  The name of the custom property being defined. This must begin with a double dash ('--').

Issue: Describe what happens if the name doesn't begin with a double dash. Don't use 'must'.

Issue: what happens if syntax doesn't parse?

:   <dfn dict-member for=PropertyDescriptor>syntax</dfn>
::  A string representing how this custom property is parsed. Only
    simple type references are supported.

    Note: for example, the syntax string could be '&lt;length&gt;' or '&lt;number&gt;'.

    Note: in future levels we anticipate supporting more sophisticated parse strings, e.g.
    '&lt;length&gt; || &lt;number&gt;'

Issue(5): Add more types here.

Issue: Be explicit about which types are supported.

:   <dfn dict-member for=PropertyDescriptor>inherits</dfn>
::  True if this custom property should inherit down the DOM tree; False otherwise.

:   <dfn dict-member for=PropertyDescriptor>initialValue</dfn>
::  The initial value of this custom property.

Issue(6): initialValue must match syntax. What happens if it doesn't?

When a custom property is registered with a given type, its computed value is defined
fully by the type selected. Furthermore, the property will interpolate in a manner
defined for that type by [[css3-animations]].

Issue(1): Need to define what the computed value for each type is. Work out whether we need to describe computation per type
here, or whether we can crib from another spec.

If {{registerProperty()}} is called with a descriptor name that matches an already registered property,
then an exception is thrown and the re-registration fails.

Properties can be unregistered using {{unregisterProperty()}}. If this function is called with a name
that doesn't match an existing property then an exception is thrown.

Calls to both {{registerProperty()}} and {{unregisterProperty()}} trigger a reparse of all parsed CSS.

The apply hook {#the-apply-hook}
================================

<pre class='idl'>

interface ElementProxy {
  // includes affordances for writing to computed values, but only
  // those in outputProperties. Also for reading computed style
  // values, but only those in inputProperties..
};

callback ApplyCallback = void (ElementProxy element);

dictionary ApplyDescriptor {
  ApplyCallback applyHook;
  sequence&lt;DOMString&gt;? inputProperties;
  sequence&lt;DOMString&gt; outputProperties;
};

partial interface Context {
  long registerApplyHook(ApplyDescriptor apply);
  void unregisterApplyHook(long hookID);
};
</pre>


:   <dfn dict-member for=ApplyDescriptor>inputProperties</dfn>
::  If this value is not null, then the apply function is only called for elements or
    pseudoelements on which the listed properties all have non-initial values.

Issue(4): It should it be possible to access properties on the parent.

Issue(2): Should this be available only if explicitly requested in inputProperties?

Issue: inputProperties probably shouldn't be nullable (or if it is then what does that mean?).

:   <dfn dict-member for=ApplyDescriptor>outputProperties</dfn>
::  This value defines the properties for which the apply function can modify the used
    value.

If a {{registerApplyHook()}} call is made with a list of outputProperties that contains
properties that have already been registered for output, then an exception is thrown and
the call fails.

Issue: Need to determine whether this is too inflexible.

Issue(3): Need to state that apply gets called every time any of the inputs change.

Issue: Need to state that apply runs in its own context.

Issue: Need to determine an ordering between apply getting called and transitions triggering.



Examples {#examples}
====================

Example 1: Polyfill scale, translate, rotate {#example-1}
---------------------------------------------------------

This approach prohibits the direct use of the transform property.

<pre class='lang-markup'>
&lt;script&gt;
["--scale-x", "--scale-y"].forEach(function(prop){
document.registerProperty({
    name: prop,
    inherits: false,
    initial: 1,
    syntax: "&lt;number&gt;"
    });
});

["--translate-x", "--translate-y"].forEach(function(name) {
  document.registerProperty({
    name: name,
    initial: "0px",
    inherits: false,
    type: "&lt;length&gt;"
  });
});

document.registerProperty({
  name: "--rotate",
  initial: "0deg",
  type: "&lt;angle&gt;"
  inherits: false
});
&lt;/script&gt;
&lt;style&gt;
* {
    transform: translate(var(--translate-x), var(--translate-y)) rotate(var(--rotate)) scale(var(--scale-x), var(--scale-y));
}

#myElement {
    --translate-x: 5px;
    --translate-y: 10px;
    --rotate: 10deg;
    --scale-x: 25;
    --scale-y: 25;
}

.foobar {
    --rotate: 20deg;
}
&lt;/style&gt;
</pre>

Example 2: as above, but with transform property still operational {#example-2}
-------------------------------------------------------------------------------

<pre class='lang-javascript'>
this.registerApplyHook({
    apply: function(el) {
      el.outputStyle.transform = 'translate(' + el.style.get('--translate-x') + ', ' + el.style.get('--translate-y') + 
                                   ') rotate(' + el.style.get('--rotate') + 
                                   ') scale(' + el.style.get('--scale-x') + ', ' + el.style.get('--scale-y') + ')' + 
                                   el.style.get('transform');
    },
    inputProperties: ["--translate-*", "--scale-*", "--rotate", "transform"],
    outputProperties: ["transform"]
});
</pre>

Issue: merge examples 1 and 2.

Example 3: Disabling floats {#example-3}
----------------------------------------

<pre class='lang-javascript'>
this.registerApplyHook({
  apply: function(el) {
    el.outputStyle.float = 'none';
  },
  inputProperties: ["float"],
  outputProperties: ["float"]
}); // \m/
</pre>

Example 4: Simple "layout" - media block {#example-4}
-----------------------------------------------------
This example lays out two children, with the right child taking the leftover space not taken by the left child.

<pre class='lang-javascript'>
document.registerProperty({
    name: '--media-block',
    syntax: '<ident>',
    inherits: false,
    initial: 'no'
});

this.registerApplyHook({
    apply: function(element) {
        let [right, left] = element.childElements;
        let outerWidth = el.style.get("width"); // This is just the CSS value... what happens with 'auto';
        let rightWidth = right.style.get("width");
        left.outputStyle.width = "calc("+outerWidth+" - "+ rightWidth +")";
        right.outputStyle.float = "left";
        left.outputStyle.float = "left";
    },
    inputProperties: ["--media-block", "width", "child/width"],
    outputProperties: ["width", "float"]
});
</pre>

Issue: this example doesn't work, and access to child style probably *can't* work.

Notes {#Notes}
==============

<pre class='note'>

syntax: is a string, doesn't accept anything for V1 except '&lt;a single type here&gt;' (e.g. &lt;length&gt;).
Specifically: &lt;length&gt;, &lt;color&gt;, &lt;number&gt;, &lt;angle&gt;, &lt;url&gt;, &lt;image&gt;, &lt;position&gt;, &lt;transform&gt;
type: not needed for V1 (because it's derived from syntax).
animation: not needed for V1 (because it's derived from syntax).

Limitation: can't have percentages without a computation hook.

Does invalidation go here?

What does this give us:
1.  the ability to feed typed information to custom paint/layout
2.  the ability to animate custom properties

Things that are missing:
1.  there's no way to define a custom computation - i.e. we can take '33em' to '330px' in the standard way, but
    we can't convert '33em' to something special.
2.  there's no way to define custom animation. So we can't register for strings and define some crazy way
    to animate them.
3.  there's no way (outside of direct var references or custom painters/layouters) for the custom properties
    to impact layout or paint. This is 'applying the value', and refers to manipulating the used value of
    other properties.

Minimum Viable Use Cases
------------------------
* register --layout, which uses abspos to emulate grid.


Elephants in the room
---------------------
* The apply model means that you can't have two custom properties that apply to the same used
  values coexisting on the same element.


registerProperty({
  name: '--layout',
  syntax: '<string>',
  inherit: false,
  initialValue: 'none',
  apply: function(used, value) {
    if (value == 'shittygrid') {
      used.width = '500px';
    }
  }
});

registerProperty({
  name: '--extraBorder',
  syntax: '<length>',
  inherit: false,
  initialValue: '0px',
  apply: function(used, value) {
    used.width += value;
  }
});


<script>
registerProperty({
  name: '--leftLinePosition',
  syntax: '<length>',
  inherit: true,
  initialValue: '0px',
  invalidation: 'geometry'
  // what's missing: the compute hook ('type')
  // what's missing: the animation hook ('type' too?)
  // what's missing: applying the value
 });
</script>

<script> // in a worker / context / something.
registerPaintCallback({
  name: 'leftLinePainter',
  impl: myRegisterPaintCallbackFunction,
  properties: ['--leftLinePosition']
}
</script>

<style>
.foo {
  transition: --leftLinePosition; // this is valid!
  --leftLinePosition: 44px;
  --leftLinePosition: 44rad; // rejected at parse time.
  background-image: paint(leftLinePainter);
}

.foo:hover {
  --leftLinePosition: 100px; // transitions to this on hover
}
</style>

<style>
.foo {
  --myProperty: 44px;
}

.bar { @ this is a child of .foo
  width: var(--myProperty);
}
</style>

<script>
registerProperty({
  name: '--extraLeftMargin',
  syntax: '<length>',
  inherit: true,
  initialValue: '0px',
  apply: function(used, value) {
    used.width += value;
  }
});
</script>

</pre>
