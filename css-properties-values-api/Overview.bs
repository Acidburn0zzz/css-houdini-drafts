<pre class='metadata'>
Title:  CSS Properties and Values API Level 1
Status: DREAM
Group: houdini
ED: https://drafts.css-houdini.org/css-properties-values-api-1/
Shortname: css-properties-values-api
Level: 1
Abstract: 
Editor: Tab Atkins, jackalmage@gmail.com
Editor: Shane Stephens, shanestephens@google.com
Editor: Daniel Glazman, daniel.glazman@disruptive-innovations.com
Editor: Elliot Sprehn, esprehn@chromium.org
Editor: Greg Whitworth, gwhit@microsoft.com
Ignored Terms: boolean, Animatable, Map, Context, custom context 
Repository: w3c/css-houdini-drafts
</pre>

Introduction {#intro}
=====================

This text is non-normative. In order to allow for the creation of custom properties (e.g. "myproperty:") this specification
details the API to create a new property, what values it can except, and how to handle the property during cascade. It is recommended not to
use this API for layout but only to affect cascading in a non-native manner.

Registering custom properties {#registering-custom-properties}
==============================================================

<pre class='idl'>
dictionary PropertyDescriptor {
  DOMString name;
  DOMString syntax;
  boolean   inherits;
  DOMString initialValue;
};

partial interface CSS {
  void registerProperty(PropertyDescriptor descriptor);
  void unregisterProperty(DOMString name);
};
</pre>

Issue: Maybe should be on Document instead of CSS? Probably not as we can't think of a reason to want
per-document custom properties within a Window.

:   <dfn dict-member for=PropertyDescriptor>name</dfn>
::  The name of the custom property being defined.

:   <dfn dict-member for=PropertyDescriptor>syntax</dfn>
::  A string representing how this custom property is parsed. Only
    simple type references are supported.

    Note: for example, the syntax string could be "&lt;length&gt;" or "&lt;number&gt;".

    Note: in future levels we anticipate supporting more sophisticated parse strings, e.g.
    "&lt;length&gt; || &lt;number&gt;"

:   <dfn dict-member for=PropertyDescriptor>inherits</dfn>
::  True if this custom property should inherit down the DOM tree; False otherwise.

:   <dfn dict-member for=PropertyDescriptor>initialValue</dfn>
::  The initial value of this custom property.

Issue(48): It'd be nice to be able to specify e.g. "<width>" or "<background-color>" too.

Issue(10): It'd be nice to be able to specify that a property can take the name of any property as a value.

Attempting to register properties with a {{PropertyDescriptor/name}} that doesn't 
correspond to the <<custom-property-name>> production must cause {{registerProperty()}}
to throw a SyntaxError.

Attempting to call {{registerProperty()}} with a {{PropertyDescriptor/initialValue}} that is
not parseable using the provided {{PropertyDescriptor/syntax}} must cause it to
throw a SyntaxError.

When a custom property is registered with a given type, the process via which specified
values for that property are turned into computed values is defined
fully by the type selected. Furthermore, the property will interpolate in a manner
defined for that type by [[css3-animations]].

If {{registerProperty()}} is called with a descriptor name that matches an already registered property,
then an exception is thrown and the re-registration fails.

Properties can be unregistered using {{unregisterProperty()}}. If this function is called with a name
that doesn't match an existing property then an exception is thrown.

Calls to both {{registerProperty()}} and {{unregisterProperty()}} trigger a reparse of all parsed CSS.

Supported syntax strings {#supported-syntax-strings}
----------------------------------------------------

The following syntax strings are supported:

:   "&lt;length>"
::  Any valid <<length>> value
:   "&lt;number>"
::  <<number>> values
:   "&lt;percentage>"
::  Any valid <<percentage>> value
:   "&lt;custom-ident>"
::  Any valid <<custom-ident>> value
:   Any string, the contents of which matches the <<ident>> production
::  That string
:   Any combination of the preceding, separated by '|'
::  Any value that matches one of the items in the combination, matched in specified order.
:   "*"
::  Any valid token stream

<div class='example'>
For example, the following are all valid syntax strings.

:   <code>"&lt;length>"</code>
::  accepts length values
:   <code>"&lt;length> | &lt;percent>"</code>
::  accepts lengths, or percentages, or length calc expressions, but not
    calc expressions containing a combination of length and percent values.
:   <code>"big | bigger | BIGGER"</code>
::  accepts the string "big", or the string "bigger", or the string "BIGGER".

</div>

Calculation of Computed values {#calculation-of-computed-values}
----------------------------------------------------------------

The syntax of a custom property fully determines how computed values are generated from specified values for that property.

For &lt;length> values, the computed value is the absolute length expressed in pixels.

For &lt;number>, &lt;percentage>, &lt;custom-ident>, string or "*" values, the computed value is identical to the specified value.

For values specified by a syntax string that include "|" clauses, the computed
value is given by applying the calculation rules for the first clause that
matches to the specified value.

The apply hook {#the-apply-hook}
================================

<pre class='idl'>

interface ElementProxy {
  // includes affordances for writing to computed values, but only
  // those in outputProperties. Also for reading computed style
  // values, but only those in inputProperties..
};

callback ApplyCallback = void (ElementProxy element);

dictionary ApplyDescriptor {
  ApplyCallback applyHook;
  sequence&lt;DOMString&gt; inputProperties;
  sequence&lt;DOMString&gt; outputProperties;
};

partial interface Context {
  long registerApplyHook(ApplyDescriptor apply);
  void unregisterApplyHook(long hookID);
};
</pre>


:   <dfn dict-member for=ApplyDescriptor>inputProperties</dfn>
::  The apply function is only called for elements or
    pseudoelements on which the listed properties all have non-initial values.

Issue(4): It should it be possible to access properties on the parent.

Issue(2): Should this be available only if explicitly requested in inputProperties?

:   <dfn dict-member for=ApplyDescriptor>outputProperties</dfn>
::  This value defines the properties for which the apply function can modify the used
    value.

If a {{registerApplyHook()}} call is made with a list of outputProperties that contains
properties that have already been registered for output, then an exception is thrown and
the call fails.

Issue: This is too inflexible. Thereâ€™s a strong use case around writing to the
same native property for different elements. Maybe throw exception to
window.onError in this case?

Each time style is recomputed for an Element, each registered {{ApplyDescriptor/applyHook}} 
for which any of the matching {{ApplyDescriptor/inputProperties}} changes as a result of 
that recomputation is invoked. This invocation takes place in a <a>custom context</a>.

Issue: Hook the transition language more precisely here.

Issue: Need to determine an ordering between apply getting called and transitions triggering.


Examples {#examples}
====================

Example 1: Polyfill scale, translate, rotate {#example-1}
---------------------------------------------------------

This approach prohibits the direct use of the transform property.

<pre class='lang-markup'>
&lt;script&gt;
["--scale-x", "--scale-y"].forEach(function(prop){
document.registerProperty({
    name: prop,
    inherits: false,
    initial: 1,
    syntax: "&lt;number&gt;"
    });
});

["--translate-x", "--translate-y"].forEach(function(name) {
  document.registerProperty({
    name: name,
    initial: "0px",
    inherits: false,
    syntax: "&lt;length&gt;"
  });
});

document.registerProperty({
  name: "--rotate",
  initial: "0deg",
  syntax: "&lt;angle&gt;"
  inherits: false
});
&lt;/script&gt;
&lt;style&gt;

#myElement {
    --translate-x: 5px;
    --translate-y: 10px;
    --rotate: 10deg;
    --scale-x: 25;
    --scale-y: 25;
}

.foobar {
    --rotate: 20deg;
}
&lt;/style&gt;

&lt;script&gt;
this.registerApplyHook({
    apply: function(el) {
      el.outputStyle.transform = 'translate(' + el.style.get('--translate-x') + ', ' + el.style.get('--translate-y') + 
                                   ') rotate(' + el.style.get('--rotate') + 
                                   ') scale(' + el.style.get('--scale-x') + ', ' + el.style.get('--scale-y') + ')' + 
                                   el.style.get('transform');
    },
    inputProperties: ["--translate-*", "--scale-*", "--rotate", "transform"],
    outputProperties: ["transform"]
});
&lt;/script&gt;
</pre>
