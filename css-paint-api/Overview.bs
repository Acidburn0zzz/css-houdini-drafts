<pre class='metadata'>
Title:  CSS Painting API Level 1
Status: ED
Group: houdini
ED: https://drafts.css-houdini.org/css-paint-api-1/
Previous Version: http://www.w3.org/TR/2016/WD-css-paint-api-1-20160607/
Shortname: css-paint-api
Level: 1
Abstract: 
Editor: Shane Stephens, shanestephens@google.com
Editor: Ian Kilpatrick, ikilpatrick@chromium.org
Editor: Dean Jackson, dino@apple.com
</pre>

<pre class="link-defaults">
spec:css-break-3; type:dfn; text:fragment
</pre>

<pre class="anchors">
urlPrefix: https://heycam.github.io/webidl/; type: dfn;
    text: InvalidModificationError
    urlPrefix: #dfn-;
        url: throw; text: thrown
    urlPrefix: #idl-;
        text: boolean
        text: DOMException
    url: es-type-mapping; text: converting
urlPrefix: https://html.spec.whatwg.org/multipage/; type: dfn;
    urlPrefix: scripting.html
        text: reset the rendering context to its default state
        text: output bitmap
        text: set bitmap dimensions
        url: concept-canvas-alpha; text: alpha
urlPrefix: https://tc39.github.io/ecma262/#sec-; type: dfn;
    text: constructor
    text: Construct
    text: IsArray
    text: IsCallable
    text: IsConstructor
    url: ecmascript-data-types-and-values; text: type
    url: get-o-p; text: Get
    url: terms-and-definitions-function; text: function
    urlPrefix: native-error-types-used-in-this-standard-
        text: TypeError
</pre>

Introduction {#intro}
=====================

The paint stage of CSS is responsible for painting the background, content and highlight of a
box based on that box's size (as generated by the layout stage) and computed style.

This specification describes an API which allows developers to paint a part of a box in
response to size / computed style changes with an additional <<image>> function.

Note: In a future version of the spec, support may be added for defining the clip, global alpha,
    filter on a portion of a box (for example on the background layers).

Paint Invalidation {#paint-invalidation}
========================================

A <a>document</a> has a <a>map</a> of <dfn>paint input properties</dfn>. Initially it is empty and
is populated when {{registerPaint(name, paintCtor)}} is called.

Each <<paint()>> function for a box has an associated <dfn>paint valid flag</dfn>. It may be either
<dfn>paint-valid</dfn> or <dfn>paint-invalid</dfn>. It is initially set to <a>paint-invalid</a>.

When the size (as determined by layout) of a |box| changes, each <<paint()>> function's <a>paint
valid flag</a> should be set to <a>paint-invalid</a>.

When the computed style for a |box| changes, the user agent must run the following steps:
    1. For each <<paint()>> function on the |box|, perform the following substeps:
        1. Let |paintFunction| be the current <<paint()>> function on the |box|.

        2. Let |name| be the first argument of the <<paint()>> function.

        3. Let |paintInputPropertiesMap| be the associated <a>document</a>'s <a>paint input
            properties</a> map.

        4. Let |inputProperties| be the result of <a>get</a> |paintInputPropertiesMap|[|name|].

        5. For each |property| in |inputProperties|, if the |property|'s <a>computed value</a> has
            changed, set the <a>paint valid flag</a> on the |paintFunction| to <a>paint-invalid</a>.

Performing <a>draw a paint image</a> results in the <a>paint valid flag</a> for a <<paint()>>
function on a box to be set to <a>paint-valid</a>.

Note: In a future version of the spec, support may be added for partial invalidation. The user agent
    will be able to specify a region of the rendering context which needs to be re-painted by the
    paint class.

Paint Worklet {#paint-worklet}
==============================

The {{paintWorklet}} attribute allows access to the {{Worklet}} responsible for all the classes
which are related to painting.

The {{paintWorklet}}'s <a>worklet global scope type</a> is {{PaintWorkletGlobalScope}}.

<pre class='idl'>
partial interface CSS {
    [SameObject] readonly attribute Worklet paintWorklet;
};
</pre>

The {{PaintWorkletGlobalScope}} is the global execution context of the {{paintWorklet}}.

<pre class='idl'>
[Global=(Worklet,PaintWorklet),Exposed=PaintWorklet]
interface PaintWorkletGlobalScope : WorkletGlobalScope {
    void registerPaint(DOMString name, VoidFunction paintCtor);
};
</pre>

<div class='note'>
    Note: The shape of the class should be:
    <pre class='lang-javascript'>
        class MyPaint {
            static get inputProperties() { return ['--foo']; }
            static get alpha() { return true; }
            paint(ctx, size, styleMap) {
                // Paint code goes here.
            }
        }
    </pre>
</div>

Concepts {#concepts}
====================

A <dfn>paint image definition</dfn> describes an author defined <<image>> which can be referenced by
the <<paint()>> function. It consists of:

 - A <dfn>paint image name</dfn>.

 - A <dfn>paint class constructor</dfn> which is the class <a>constructor</a>.

 - A <dfn>paint function</dfn> which is the paint <a>function</a> callback.

 - A <dfn>paint constructor valid flag</dfn>.

 - A <dfn>paint input property list</dfn>.

 - A <dfn>paint context alpha flag</dfn>.

Registering Custom Paint {#registering-custom-paint}
====================================================

The {{PaintWorkletGlobalScope}} has a <a>map</a> of <dfn>paint image definitions</dfn>. Initially
this map is empty; it is populated when {{registerPaint(name, paintCtor)}} is called.

The {{PaintWorkletGlobalScope}} has a <a>map</a> of <dfn>paint class instances</dfn>. Initially this
map is empty; it is populated when <a>draw a paint image</a> is invoked by the user agent.

Instances of paint classes in the <a>paint class instances</a> map may be disposed and removed from
the map by the user agent at any time. This may be done when a <<paint()>> function no longer is
used, or the user agent needs to reclaim memory.

When the <dfn method for=PaintWorkletGlobalScope>registerPaint(|name|, |paintCtor|)</dfn> method is
called, the user agent <em>must</em> run the following steps:
    1. If the |name| is an empty string, <a>throw</a> a <a>TypeError</a> and abort all these steps.

    2. Let |paintImageDefinitionMap| be {{PaintWorkletGlobalScope}}'s <a>paint image definitions</a>
        map.

    3. If |paintImageDefinitionMap|[|name|] <a for=map>exists</a> <a>throw</a> a
        "<a>InvalidModificationError</a>" <a>DOMException</a> and abort all these steps.

    4. Let |inputProperties| be an empty <code>sequence&lt;DOMString></code>

    5. Let |inputPropertiesIterable| be the result of <a>Get</a>(|paintCtor|, "inputProperties").

    6. If |inputPropertiesIterable| is not undefined, then set |inputProperties| to the result of
        <a>converting</a> |inputPropertiesIterable| to a <code>sequence&lt;DOMString></code>. If an
        exception is <a>thrown</a>, rethrow the exception and abort all these steps.

    Note: The list of CSS properties provided by the input properties getter can either be custom or
        native CSS properties.

    Note: The list of CSS properties may contain shorthands.

    Note: In order for a paint image class to be forwards compatible, the list of CSS properties can
        also contains currently invalid properties for the user agent. For example
        <code>margin-bikeshed-property</code>.

    7. Let |alphaValue| be the result of <a>Get</a>(|paintCtor|, "alpha").

    8. Let |alpha| be <code>true</code> if |alphaValue| is undefined, otherwise let it be the result
        of <a>converting</a> |alphaValue| to a <a>boolean</a>. If an exception is <a>thrown</a>,
        rethrow the exception and abort all these steps.

        Note: Setting <code>alpha</code> is <code>false</code> allows user agents to anti-alias text
            an addition to performing "visibility" optimizations, e.g. not painting an image behind
            the paint image as the paint image is opaque.

    9. If the result of <a>IsConstructor</a>(|paintCtor|) is false, <a>throw</a> a <a>TypeError</a>
        and abort all these steps.

    10. Let |prototype| be the result of <a>Get</a>(|paintCtor|, "prototype").

    11. If the result of <a>Type</a>(|prototype|) is not Object, <a>throw</a> a <a>TypeError</a> and
        abort all these steps.

    12. Let |paint| be the result of <a>Get</a>(|prototype|, "paint").

    13. If the result of <a>IsCallable</a>(|paint|) is false, <a>throw</a> a <a>TypeError</a> and
        abort all these steps.

    14. Let |definition| be a new <a>paint image definition</a> with:

        - <a>paint image name</a> being |name|
 
        - <a>paint class constructor</a> being |paintCtor|

        - <a>paint function</a> being |paint|

        - <a>paint constructor valid flag</a> being true

        - <a>paint input property list</a> being |inputProperties|.

        - <a>paint context alpha flag</a> being |alpha|.

    15. <a for=map>Set</a> |paintImageDefinitionMap|[|name|] to |definition|.

    16. <a>Queue a task</a> to run the following steps:

        1. Let |paintInputPropertiesMap| be the associated <a>document</a>'s <a>paint input
            properties</a> map.

        2. If |paintInputPropertiesMap|[|name|] <a for=map>exists</a> run the following substeps:

            1. Let |existingInputProperties| be the result of <a>get</a>
                |paintInputPropertiesMap|[|name|].

            2. If |existingInputProperties| and |inputProperties| are not equivalent, <a
                for=map>set</a> |paintInputPropertiesMap|[|name|] to <code>"invalid"</code>.

            3. The user agent <em>should</em> log an error to the debugging console stating that the
                same class was registered with different <code>inputProperties</code>.

        3. Otherwise, <a for=map>set</a> |paintInputPropertiesMap|[|name|] to |inputProperties|.

Note: The list of input properties should only be looked up once, the class doesn't have the
    opportunity to dynamically change its input properties.

Note: In a future version of the spec, the author may be able to set an option to receive a
    different type of RenderingContext. In particular the author may want a WebGL rendering context
    to render 3D effects. There are complexities in setting up a WebGL rendering context to take the
    {{PaintSize}} and {{StylePropertyMap}} as inputs.

Paint Notation {#paint-notation}
================================

<pre class='prod'>
    <dfn>paint()</dfn> = paint( <<ident>> )
</pre>

The <<paint()>> function is an additional notation to be supported by the <<image>> type.

<div class="example">
    <pre>background-image: paint(my_logo);</pre>
</div>

For the 'cursor' property, the <<paint()>> function should be treated as an <a>invalid image</a> and
fallback to the next supported <<image>>.

Issue(w3c/css-houdini-drafts#100): Support additional arbitrary arguments for the paint function.
    This is difficult to specify, as you need to define a sane grammar. A better way would be to
    expose a token stream which you can parse into Typed OM objects. This would allow a full
    arbitrary set of function arguments, and be future proof.

The 2D rendering context {#2d-rendering-context}
================================================

<pre class='idl'>
[Exposed=PaintWorklet]
interface PaintRenderingContext2D {
};
PaintRenderingContext2D implements CanvasState;
PaintRenderingContext2D implements CanvasTransform;
PaintRenderingContext2D implements CanvasCompositing;
PaintRenderingContext2D implements CanvasImageSmoothing;
PaintRenderingContext2D implements CanvasFillStrokeStyles;
PaintRenderingContext2D implements CanvasShadowStyles;
PaintRenderingContext2D implements CanvasRect;
PaintRenderingContext2D implements CanvasDrawPath;
PaintRenderingContext2D implements CanvasDrawImage;
PaintRenderingContext2D implements CanvasPathDrawingStyles;
PaintRenderingContext2D implements CanvasPath;
</pre>

Note: The {{PaintRenderingContext2D}} implements a subset of the {{CanvasRenderingContext2D}} API.
    Specifically it doesn't implement the {{CanvasImageData}}, {{CanvasUserInterface}},
    {{CanvasText}}, or {{CanvasTextDrawingStyles}} APIs.

A {{PaintRenderingContext2D}} object has a <a>output bitmap</a>. This is initialised when the
object is created. The size of the <a>output bitmap</a> is the size of the fragment it is
rendering.

The size of the <a>output bitmap</a> does not necessarily represent the size of the actual bitmap
that the user agent will use internally or during rendering. For example, if the visual viewport is
zoomed the user agent may internally use bitmaps which correspond to the number of device pixels in
the coordinate space, so that the resulting rendering is of high quality.

Additionally the user agent may record the sequence of drawing operations which have been applied to
the <a>output bitmap</a> such that the user agent can subsequently draw onto a device bitmap at the
correct resolution. This also allows user agents to re-use the same output of the <a>output
bitmap</a> repeatably while the visual viewport is being zoomed for example.

When the user agent is to <dfn>create a PaintRenderingContext2D object</dfn> for a given |width|,
|height| and |alpha| it <em>must</em> run the following steps:
    1. Create a new {{PaintRenderingContext2D}}.
    2. <a>Set bitmap dimensions</a> for the context's <a>output bitmap</a> to |width| and |height|.
    3. Set the {{PaintRenderingContext2D}}'s <a>alpha</a> flag to |alpha|.
    4. Return the new {{PaintRenderingContext2D}}.

Note: The initial state of the rendering context is set inside the <a>set bitmap dimensions</a>
    algorithm, as it invokes <a>reset the rendering context to its default state</a> and clears the
    <a>output bitmap</a>.

Drawing an image {#drawing-an-image}
====================================

If a <<paint()>> function for a fragment is <a>paint-invalid</a> and the fragment is within the
visual viewport, then user agent <em>must</em> <a>draw a paint image</a> for the current frame. The
user agent <em>may not</em> defer the <a>draw a paint image</a> operation until a subsequent frame.

Note: The user agent may choose to <a>draw a paint image</a> for <<paint()>> functions not within
    the visual viewport.

<div class="example">
    If an author updates a style inside a <code>requestAnimationFrame</code>, e.g.
    <pre class='lang-javascript'>
        requestAnimationFrame(function() {
            element.styleMap.set('--custom-prop-invalidates-paint', 42);
        });
    </pre>
    And the <code>element</code> is inside the visual viewport, the user agent <em>must</em> <a>draw
    a paint image</a> and display the result on the current frame.
</div>

The <a>draw a paint image</a> function should be invoked by the user agent during the <a>object size
negotiation</a> algorithm which is responsible for rendering an <<image>>.

For the purposes of the <a>object size negotiation</a> algorithm, the paint image has no
<a>intrinsic dimensions</a>.

Note: In a future version of the spec, the author may be able to specify the <a>intrinsic
    dimensions</a> of the paint image. This will probably be exposed as a callback allowing the
    author to define static <a>intrinsic dimensions</a> or dynamically updating the <a>intrinsic
    dimensions</a> based on computed style and size changes.

The {{PaintSize}} object represents the size of the image that the author should draw. This is
the <a>concrete object size</a> given by the user agent.

<pre class='idl'>
[Exposed=PaintWorklet]
interface PaintSize {
    readonly attribute double width;
    readonly attribute double height;
};
</pre>

When the user agent wants to <dfn>draw a paint image</dfn> of a <<paint()>> function for a |box|
into its appropriate stacking level (as defined by the property the CSS property its associated
with), given its |concreteObjectSize| (<a>concrete object size</a>) it <em>must</em> run the
following steps:
    1. Let |paintFunction| be the <<paint()>>> function on the |box| which the user agent wants to
        draw.

    2. If the <a>paint valid flag</a> for the |paintFunction| is <a>paint-valid</a> the user agent
        <em>may</em> use the drawn image from the previous invocation. If so it <em>may</em> abort
        all these steps and use the previously drawn image.

        Note: The user agent for implementation reasons may also continue with all these steps in
            this case. It can do this every frame, or multiple times per frame.

    3. Set the <a>paint valid flag</a> for the |paintFunction| to <a>paint-valid</a>.

    4. Let |name| be the first argument of the |paintFunction|.

    5. Let |paintInputPropertiesMap| be the associated <a>document's</a> <a>paint input
        properties</a> map.

    6. If |paintInputPropertiesMap|[|name|] does not <a for=map>exist</a>, let the image output be
        an <a>invalid image</a> and abort all these steps.

    7. If the result of <a>get</a> |paintInputPropertiesMap|[|name|] is <code>"invalid"</code>, let
        the image output be an <a>invalid image</a> and abort all these steps.

    8. Let |workletGlobalScope| be a {{PaintWorkletGlobalScope}} from the list of <a>worklet's
        WorkletGlobalScopes</a> from the paint {{Worklet}}.

        The user agent <em>may</em> also <a>create a WorkletGlobalScope</a> given the paint
        {{Worklet}} and use that.

        Note: The user agent <em>may</em> use any policy for which {{PaintWorkletGlobalScope}} to
            select or create. It may use a single {{PaintWorkletGlobalScope}} or multiple and
            randomly assign between them.

    9. Run <a>invoke a paint callback</a> given |name|, |concreteObjectSize|, |workletGlobalScope|
        optionally <a>in parallel</a>.

        Note: If the user agent runs <a>invoke a paint callback</a> on a thread <a>in parallel</a>,
            it should select a paint worklet global scope which can be used on that thread.

When the user agent wants to <dfn>invoke a paint callback</dfn> given |name|, |concreteObjectSize|,
|workletGlobalScope|, it <em>must</em> run the following steps:

    1. Let |paintImageDefinitionMap| be |workletGlobalScope|'s <a>paint image definitions</a> map.

    2. If |paintImageDefinitionMap|[|name|] does not <a for=map>exist</a>, run the following
        substeps:

        1. <a>Queue a task</a> to run the following substeps:

            1. Let |paintInputPropertiesMap| be the associated <a>document</a>'s <a>paint input
                properties</a> map.

            2. <a for=map>Set</a> |paintInputPropertiesMap|[|name|] to <code>"invalid"</code>.

            3. The user agent <em>should</em> log an error to the debugging console stating that a
                class wasn't registered in all {{PaintWorkletGlobalScope}}s.

        2. Let the image output be an <a>invalid image</a> and abort all these steps.

        Note: This handles the case where there may be a paint worklet global scope which didn't
            receive the {{registerPaint(name, paintCtor)}} for |name| (however another global scope
            did). A paint callback which is invoked on the other global scope may succeed, but wont
            succeed on a subsequent frame when <a>draw a paint image</a> is called.

    3. Let |definition| be the result of <a>get</a> |paintImageDefinitionMap|[|name|].

    4. Let |paintClassInstanceMap| be |workletGlobalScope|'s <a>paint class instances</a> map.

    5. Let |paintInstance| be the result of <a>get</a> |paintClassInstanceMap|[|name]|. If
        |paintInstance| is null run the following substeps:

        1. If the <a>paint constructor valid flag</a> on |definition| is false, let the image output
            be an <a>invalid image</a> and abort all these steps.

        2. Let |paintCtor| be the <a>paint class constructor</a> on |definition|.

        3. Let |paintInstance| be the result of <a>Construct</a>(|paintCtor|).

            If <a>Construct</a> throws an exception, set the |definition|'s <a>paint constructor
            valid flag</a> to false, let the image output be an <a>invalid image</a> and abort all
            these steps.

        4. <a for=map>Set</a> |paintClassInstanceMap|[|name|] to |paintInstance|.

    6. Let |inputProperties| be |definition|'s <a>paint input property list</a>.

    7. Let |styleMap| be a new {{StylePropertyMapReadOnly}} populated with <em>only</em> the
        <a>computed value</a>'s for properties listed in |inputProperties|.

    8. Let |renderingContext| be the result of <a>create a PaintRenderingContext2D object</a>
        given:
            - "width" - The width given by |concreteObjectSize|.
            - "height" - The height given by |concreteObjectSize|.
            - "alpha" - The <a>paint context alpha flag</a> given by |definition|.

        Note: The |renderingContext| must not be re-used between invocations of paint. Implicitly
            this means that there is no stored data, or state on the |renderingContext| between
            invocations. For example you can't setup a clip on the context, and expect the same clip
            to be applied next time the paint method is called.

        Note: Implicitly this also means that |renderingContext| is effectively "neutered" after a
            paint method is complete. The author code may hold a reference to |renderingContext| and
            invoke methods on it, but this will have no effect on the current image, or subsequent
            images.

    9. Let |paintSize| be a new {{PaintSize}} initialized to the width and height defined by
        |concreteObjectSize|.

    10. Let |paintFunctionCallback| be |definition|'s <a>paint function</a>.

    11. <a>Invoke</a> |paintFunctionCallback| with arguments «|renderingContext|, |paintSize|,
        |styleMap|», and with |paintInstance| as the <a>callback this value</a>.

    12. The image output is to be produced from the |renderingContext| given to the method.

        If an exception is <a>thrown</a> the let the image output be an <a>invalid image</a>.

Note: The user agent <em>should</em> consider long running paint functions similar to long running
    script in the main execution context. For example, they <em>should</em> show a "unresponsive
    script" dialog or similar. In addition user agents <em>should</em> provide tooling within their
    debugging tools to show authors how expensive their paint classes are.

Note: The contents of the resulting image are not designed to be accessible. Authors <em>should</em>
    communicate any useful information through the standard accessibility APIs.

Examples {#examples}
====================

Example 1: A colored circle. {#example-1}
-----------------------------------------

<pre class='lang-markup'>
&lt;div id="myElement">
    CSS is awesome.
&lt;/div>

&lt;style>
#myElement {
    --circle-color: red;
    background-image: paint(circle);
}
&lt;/style>

&lt;script>
    CSS.paintWorklet.import('circle.js');
&lt;/script>
</pre>

<pre class='lang-javascript'>
// circle.js
registerPaint('circle', class {
    static get inputProperties() { return ['--circle-color']; }
    paint(ctx, geom, properties) {
        // Change the fill color.
        const color = properties.get('--circle-color');
        ctx.fillStyle = color;

        // Determine the center point and radius.
        const x = geom.width / 2;
        const y = geom.height / 2;
        const radius = Math.min(x, y);

        // Draw the circle \o/
        ctx.beginPath();
        ctx.arc(x, y, radius, 0, 2 * Math.PI, false);
        ctx.fill();
    }
});
</pre>

Example 2: Image placeholder. {#example-2}
------------------------------------------

It is possible for an author to use paint to draw a placeholder image while an image is being
loaded.

<pre class='lang-markup'>
&lt;div id="myElement">
&lt;/div>

&lt;style>
#myElement {
    --image: url('#someUrlWhichIsLoading');
    background-image: paint(image-with-placeholder);
}
&lt;/style>

&lt;script>
    CSS.registerProperty({
        name: '--image',
        syntax: '&lt;image&gt;'
    });
    CSS.paintWorklet.import('image-placeholder.js');
&lt;/script>
</pre>

<pre class='lang-javascript'>
// image-placeholder.js
registerPaint('image-with-placeholder', class {
    static get inputProperties() { return ['--image']; }
    paint(ctx, geom, properties) {
        const img = properties.get('--image');

        switch (img.state) {
            case 'ready':
                // The image is loaded! Draw the image.
                ctx.drawImage(img, 0, 0, geom.width, geom.height);
                break;
            case 'pending':
                // The image is loading, draw some mountains.
                drawMountains(ctx);
                break;
            case 'invalid':
            default:
                // The image is invalid (e.g. it didn't load), draw a sad face.
                drawSadFace(ctx);
                break;
        }
    }
});
</pre>

Example 3: Conic-gradient {#example-3}
--------------------------------------

Issue: Add conic-gradient as a use case once we have function arguments.

Example 4: Different color based on size {#example-4}
-----------------------------------------------------

<pre class='lang-markup'>
&lt;h1>
    Heading 1
&lt;/h1>
&lt;h1>
    Another heading
&lt;/h1>

&lt;style>
h1 {
    background-image: paint(heading-color);
}
&lt;/style>

&lt;script>
    CSS.paintWorklet.import('heading-color.js');
&lt;/script>
</pre>

<pre class='lang-javascript'>
// heading-color.js
registerPaint('heading-color', class {
    static get inputProperties() { return []; }
    paint(ctx, geom, properties) {
        // Select a color based on the width and height of the image.
        const width = geom.width;
        const height = geom.height;
        const color = colorArray[(width * height) % colorArray.length];

        // Draw just a solid image.
        ctx.fillStyle = color;
        ctx.fillRect(0, 0, width, height);
    }
});
</pre>
