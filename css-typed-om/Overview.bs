<pre class='metadata'>
Title:  CSS Typed OM Level 1
Status: DREAM
Group: houdini
ED: https://drafts.css-houdini.org/css-typed-om-1/
Shortname: css-typed-om
Level: 1
Abstract:
Editor: Shane Stephens, shanestephens@google.com
Repository: w3c/css-houdini-drafts
</pre>

<pre class=link-defaults>
spec: dom-ls; type:interface; text:Document;
spec: dom-ls; type:interface; text:Element;
spec:css-transforms-1; type:property; text:transform
</pre>

Introduction {#intro}
=====================

Converting CSSOM value strings into meaningfully typed JavaScript representations and
back can incur a significant performance overhead. This specification exposes CSS values
as typed JavaScript objects to facilitate their performant manipulation.

The API exposed by this specification is designed for performance rather than ergonomics.
Some particular considerations:
*   retrieved JavaScript representations of CSS values are not mutable - instead updates
    must explicitly be set using the API.
*   objects are organized for consistency rather than ease of access. For example, even
    though lengths are often numeric pixel values, a specified {{LengthValue}} can't be
    treated as a number without first explicitly casting it to a {{SimpleLength}}, as calc
    expressions and keywords are also valid lengths.

Issue: is it possible to amalgamate this API with value objects once they're specced by
       TC39?

{{StyleValue}} objects {#stylevalue-objects}
============================================

<pre class='idl'>
interface StyleValue {
  attribute DOMString cssString;
  static (StyleValue or sequence&lt;StyleValue>)? parse(DOMString property, DOMString cssText);
};
</pre>

{{StyleValue}} objects are the base class of all CSS Values accessible via the Typed OM API.

The <dfn attribute for=StyleValue>cssString</dfn> attribute provides a normalized
representation (see <a section href="#stylevalue-normalization"></a>) of the value
contained by a {{StyleValue}} object.

The <dfn method for=StyleValue>parse(DOMString <var>property</var>, DOMString <var>cssText</var>)</dfn>
method attempts to parse <var>cssText</var> as a valid {{StyleValue}} or sequence&lt;{{StyleValue}}> for
<var>property</var>, returning null on failure.

Issue(41): Need to add a section describing values that reference custom properties. Should StyleValue handle
           this or should it be a subclass?

The {{StylePropertyMap}} {#the-stylepropertymap}
================================================

<pre class='idl'>
interface StylePropertyMap {
  void append(DOMString property, (StyleValue or sequence&lt;StyleValue> or DOMString) value);
  void delete(DOMString property);
  StyleValue? get(DOMString property);
  sequence&lt;StyleValue> getAll(DOMString property);
  boolean has(DOMString property);
  void set(DOMString property, (StyleValue or sequence&lt;StyleValue> or DOMString) value);
  iterable&lt;DOMString, (StyleValue or sequence&lt;StyleValue> or DOMString)>;
  sequence&lt;DOMString> getProperties();
  stringifier;
};
</pre>

Issue: I don't think we can use maplike here because this is a multimap :(

A {{StylePropertyMap}} object has an associated <dfn>property model</dfn>,
which is a list of property - sequence&lt;{{StyleValue}}> pairs. This list
is initialized differently depending on where the {{StyleValue}} is used
(see
<a section href="#computed-stylepropertymap-objects"></a>,
<a section href="#specified-stylepropertymap-objects"></a>, and
<a section href="#inline-stylepropertymap-objects"></a>).

<div class='note'>
The sequence of {{StyleValue}}s associated with a property do
not represent multiple successive definitions of that property's value.
Instead, sequences represent values associated with list-valued properties.

This approach allows single-valued properties to become list-valued in the
future without breaking code that relies on calling
<a method for=StylePropertyMap>get()</a> and/or
<a method for=StylePropertyMap>set()</a> for those properties.
</div>

Issue: this is different to the other multimaps on the platform because append/set take
       sequences.

When invoked, the <dfn method for=StylePropertyMap>append(DOMString <var>property</var> (StyleValue or sequence&lt;StyleValue> or DOMString) <var>value</var>)</dfn> method follows the following steps:

Issue: first need to check whether the property is a valid property.

1.
    :   if <var>property</var> is not list-valued
    ::  throw a TypeError

1.
    :   if the <a>property model</a> has no entry for <var>property</var>
    ::  initialize an empty sequence in the <a>property model</a> for <var>property</var>

1.
    :   if <var>value</var> is a {{StyleValue}}, and its type is a type that <var>property</var> can't accept
    ::  throw a TypeError

1.
    :   if <var>value</var> is a sequence&lt;{{StyleValue}}>, and it contains a {{StyleValue}} that has a type
        that <var>property</var> can't accept
    ::  throw a TypeError

1.
    :   if <var>value</var> is a DOMString
    ::  set <var>value</var> to the result of invoking <a method for=StyleValue>parse()</a>, providing <var>property</var>
        and <var>value</var> as inputs.

1.
    :   if <var>value</var> is null
    ::  throw a TypeError
    :   else, if <var>value</var> is a StyleValue
    ::  append <var>value</var> to the entry in the <a>property model</a>
    :   else, if <var>value</var> is a sequence&lt;StyleValue>
    ::  concatenate <var>value</var> onto the end of the entry in the <a>property model</a>


Issue: should refactor out value type-checking, as it'll be needed by the rest of the setters too

Issue: need a robust description of what "a type that <var>property</var> can't accept" means.

Issue: add detailed descriptions of the rest of the methods on {{StylePropertyMap}}

Issue: describe that these are not live objects

Computed {{StylePropertyMap}} objects {#computed-stylepropertymap-objects}
--------------------------------------------------------------------------

<pre class='idl'>
partial interface Document {
  StylePropertyMap getComputedStyleMap(Element element, optional DOMString? pseudoElt);
};
</pre>

<dfn>Computed StylePropertyMap</dfn> objects represent the computed style of an
{{Element}} or {{PseudoElement}}, and are accessed by calling the
<dfn method for=Document>getComputedStyleMap(Element, optional DOMString?)</dfn>
method.

The <a>property model</a> for <a>computed StylePropertyMap</a> objects contains
an entry for every valid CSS property supported by the User Agent.

Issue: add a StylePropertyMapReadOnly and make getComputedStyleMap return that.

Issue: better wording here and below - the property model is initialized to contain these things.

Issue: need to describe what values are here too.

Note: The StylePropertyMap returned by getComputedStyleMap represents computed style,
      not resolved style. In this regard it provides different values than those
      in objects returned by getComputedStyle.

Issue: do we want a getUsedStyleMap too? Or should it be getResolvedStyleMap?

Specified {{StylePropertyMap}} objects {#specified-stylepropertymap-objects}
----------------------------------------------------------------------------

<pre class='idl'>
partial interface CSSStyleRule {
  readonly attribute StylePropertyMap styleMap;
};
</pre>

<dfn>Specified StylePropertyMap</dfn> objects represent style property-value pairs embedded
in a style rule, and are accessed via the <dfn attribute for=CSSStyleRule>styleMap</dfn>
attribute of {{CSSStyleRule}} objects.

The <a>property model</a> for <a>specified StylePropertyMap</a> objects contains
an entry for each property that is paired with at least one valid value inside the
{{CSSStyleRule}} that the object represents. The value for a given property is
the last valid value provided by the {{CSSStyleRule}} object.


Inline {{StylePropertyMap}} objects {#inline-stylepropertymap-objects}
----------------------------------------------------------------------

<pre class='idl'>
partial interface Element {
  readonly attribute StylePropertyMap styleMap;
};
</pre>

<dfn>Inline StylePropertyMap</dfn> objects represent inline style declarations attached
directly to {{Element}}s. They are accessed via the <dfn attribute for=Element>styleMap</dfn>
attribute of {{Element}} objects.

The <a>property model</a> for <a>inline StylePropertyMap</a> objects contains an
entry for each property that is paired with at least one valid value in the string
representing the style attribute for the Element that the object is associated with.
The value for a given property is the last valid value provided in the string.

{{StyleValue}} subclasses {#stylevalue-subclasses}
==================================================

{{KeywordValue}} objects {#keywordvalue-objects}
------------------------------------------------

<pre class='idl'>
[Constructor(DOMString)]
interface KeywordValue : StyleValue {
  attribute DOMString keywordValue;
};
</pre>

{{KeywordValue}} objects represent {{StyleValue}}s that are keywords. It is a wrapper for a string
and does not check that it contains a valid keyword. Property setters will enforce keyword validity.

{{NumberValue}} objects {#numbervalue-objects}
----------------------------------------------

<pre class='idl'>
[Constructor(double), Constructor(DOMString cssString)]
interface NumberValue : StyleValue {
  attribute double value;
};
</pre>

{{NumberValue}} objects represent values for simple number-valued properties like 'z-index' or 'opacity'.

{{NumberValue}} objects are not range-restricted. Any valid number can be represented by a {{NumberValue}},
and that value will not be clamped, rounded, or rejected when set on a <a>specified StylePropertyMap</a> or
<a>inline StylePropertyMap</a>. Instead, clamping and/or rounding will occur during computation of style.

Issue: Is this the behaviour we want for out-of-range (as opposed to incorrectly typed) values?

<div class='example'>
The following code is valid

<pre class='lang-javascript'>
  myElement.styleMap.set("opacity", new NumberValue(3));
  myElement.styleMap.set("z-index", new NumberValue(15.4));

  console.log(myElement.styleMap.get("opacity").value); // 3
  console.log(myElement.styleMap.get("z-index").value); // 15.4

  var computedStyle = getComputedStyleMap(myElement);
  var opacity = computedStyle.get("opacity");
  var zIndex = computedStyle.get("z-index");
</pre>

After execution, the value of <code>opacity</code> is 1 ('opacity' is range-restricted),
and the value of <code>zIndex</code> is 15 ('z-index' is rounded to an integer value).
</div>

Issue: where does a description of parsing values go? For example, where do we indicate that
       calc(4 + 8) will create a {{NumberValue}} with a value of 12?

Issue: do we actually want to collapse calc values down to their minimum representations? I assume
       so, given that this is what the old CSSOM is now specified to do.

{{LengthValue}} objects {#lengthvalue-objects}
----------------------------------------------

<pre class='idl'>
enum LengthType {
  "px", "percent",
  "em", "ex", "ch", "rem",
  "vw", "vh", "vmin", "vmax",
  "cm", "mm", "q", "in", "pc", "pt"
};

dictionary CalcDictionary {
  double? px = null;
  double? percent = null;
  double? em = null;
  double? ex = null;
  double? ch = null;
  double? rem = null;
  double? vw = null;
  double? vh = null;
  double? vmin = null;
  double? vmax = null;
  double? cm = null;
  double? mm = null;
  double? q = null;
  double? in = null;
  double? pc = null;
  double? pt = null;
};

interface LengthValue : StyleValue {
  LengthValue add(LengthValue value); // can throw
  LengthValue subtract(LengthValue value); // can throw
  LengthValue multiply(double value); // can throw
  LengthValue divide(double value); // can throw
  static LengthValue parse(DOMString cssString);
  static LengthValue fromValue(double value, LengthType type);
  static LengthValue fromDictionary(CalcDictionary dictionary);
};

[Constructor(DOMString cssString),
 Constructor(LengthValue),
 Constructor(CalcDictionary)
]
interface CalcLength : LengthValue {
  attribute double? px;
  attribute double? percent;
  attribute double? em;
  attribute double? ex;
  attribute double? ch;
  attribute double? rem;
  attribute double? vw;
  attribute double? vh;
  attribute double? vmin;
  attribute double? vmax;
  attribute double? cm;
  attribute double? mm;
  attribute double? q;
  attribute double? in;
  attribute double? pc;
  attribute double? pt;
};

// lengths that are *just* keywords don't become SimpleLengths or CalcLengths.
[Constructor(DOMString cssString),
 Constructor(LengthValue),
 Constructor(double value, LengthType type)]
interface SimpleLength : LengthValue {
  attribute double value;
  readonly attribute LengthType type;
};
</pre>

Issue: do we want an enum of length keywords too?

Issue: write long descriptions of all of this

Issue: There are now 3 ways of creating Length values -
       StyleValue.parse, CalcLength/SimpleLength constructors, and LengthValue.parse / fromValue / fromDictionary.
       Is this too much?

Issue: What happens if the provided DOMString or LengthValue for (e.g.) a SimpleLength is invalid?

{{TransformValue}} objects {#transformvalue-objects}
-----------------------------------------------------------

<pre class='idl'>
[Constructor(),
 Constructor(sequence&lt;TransformComponent> transforms)]
interface TransformValue : StyleValue {
  iterable&lt;TransformComponent>;
  Matrix asMatrix();
  boolean is2D();
};

interface TransformComponent {
  readonly attribute DOMString cssString;
  boolean is2DComponent();
  Matrix asMatrix();
};

[Constructor(LengthValue x, LengthValue y),
 Constructor(LengthValue x, LengthValue y, LengthValue z)]
interface Translation : TransformComponent {
  readonly attribute LengthValue x;
  readonly attribute LengthValue y;
  readonly attribute LengthValue z;
};

[Constructor(double angle),
 Constructor(double angle, double x, double y, double z)]
interface Rotation : TransformComponent {
  readonly attribute double angle;
  readonly attribute double x;
  readonly attribute double y;
  readonly attribute double z;
};

[Constructor(double x, double y),
 Constructor(double x, double y, double z)]
interface Scale : TransformComponent {
  readonly attribute double x;
  readonly attribute double y;
  readonly attribute double z;
};

[Constructor(double ax, double ay)]
interface Skew : TransformComponent {
  readonly attribute double ax;
  readonly attribute double ay;
};

[Constructor(LengthValue length)]
interface Perspective : TransformComponent {
  readonly attribute LengthValue length;
};

[Constructor(double a, double b, double c, double d, double e, double f),
 Constructor(double a, double b, double c, double d,
             double e, double f, double g, double h,
             double i, double j, double k, double l,
             double m, double n, double o, double p)]
interface Matrix : TransformComponent {
  readonly attribute double a;
  readonly attribute double b;
  readonly attribute double c;
  readonly attribute double d;
  readonly attribute double e;
  readonly attribute double f;
  readonly attribute double g;
  readonly attribute double h;
  readonly attribute double i;
  readonly attribute double j;
  readonly attribute double k;
  readonly attribute double l;
  readonly attribute double m;
  readonly attribute double n;
  readonly attribute double o;
  readonly attribute double p;
};
</pre>

{{TransformValue}} objects represent values for the 'transform' property. A
{{TransformValue}} represents a list of {{TransformComponent}}s.

The <dfn method for=TransformComponent>is2DComponent()</dfn> method returns
true if the component on which it is invoked represents a 2D transform function,
and false otherwise. The transform function which the component represents is
stored in string form in the <dfn attribute for=TransformComponent>cssText</dfn>
attribute.

<div class=note>
Each {{TransformComponent}} can correspond to one of a number of underlying
transform functions. For example, a {{Translation}} with an x value of "10px"
and y &amp; z values of 0 could be:
*   translate(10px)
*   translate(10px, 0)
*   translateX(10px)
*   translate3d(10px, 0, 0)

</div>

When a {{TransformValue}} is read from a {{StylePropertyMap}}, each
{{TransformComponent}} will maintain the relevant transform function in
its <code>cssText</code> attribute. However, newly constructed {{TransformValue}}s
will always generate <code>cssText</code> according to the following rules:
*   {{Skew}} will always serialize to skew(ax, ay)
*   {{Perspective}} will always serialize to perspective(length)
*   {{Translation}}, {{Rotation}}, {{Scale}} and {{Matrix}} each have two
    constructors. In each case, the constructor with fewer arguments constructs
    a {{TransformComponent}} for which <a>is2DComponent()</a> will return true,
    with <code>cssText</code> employing the 2D version of the relevant transform
    function (translate, rotate, scale, matrix). The constructor with more
    arguments constructs a {{TransformComponent}} for which
    <a>is2DComponent()</a> will return false, with <code>cssText</code>
    employing the 3D version of the relevant transform function (translate3d,
    rotate3d, scale3d, matrix3d).

<dfn method for=TransformValue>is2D()</dfn> returns true if the <a>is2DComponent()</a>
method of every {{TransformComponent}} referenced by the {{TransformValue}} returns true,
and false otherwise.

Issue: Need to add a section for each of the other primitive types.

Issue: Need to add a section describing unions of types.

Issue: Need to add a section describing shorthands.

{{PositionValue}} objects {#positionvalue-objects}
--------------------------------------------------

<pre class='idl'>

[Constructor(LengthValue x, LengthValue y)]
interface PositionValue : StyleValue {
  readonly attribute LengthValue x;
  readonly attribute LengthValue y;
};

</pre>

{{PositionValue}} objects represent values for properties that take <<position>>
productions, for example 'background-position'.

The <dfn attribute for=PositionValue>x</dfn> attribute contains the position offset
from the left edge of the container, expressed as a length.

The <dfn attribute for=PositionValue>y</dfn> attribute contains the position offset
from the top edge of the container, expressed as a length.

Note that <<position>> productions accept a complicated combination of keywords
and values. When specified as such in a stylesheet or via the untyped CSSOM,
the <a attribute for=StyleValue>cssString</a> attribute will contain the specified
string. However, this string is normalized as two Lengths into the <a attribute
for=PositionValue>x</a> and <a attribute for=PositionValue>y</a> values of the
{{StyleValue}} object.

New {{PositionValue}} objects can only be constructed via pairs of lengths, and
will only return the direct serialization of these lengths in the
<a attribute for=StyleValue>cssString</a> attribute.

<div class='example'>

For example, the following style sheet:

<pre class='style'>
.example {
  background-position: center bottom 10px;
}
</pre>

Will produce the following behavior:

<pre class='lang-javascript'>
// "center bottom 10px"
document.querySelector('.example').styleMap.get('background-position').cssString;

// 50% - as a SimpleLength
document.querySelector('.example').styleMap.get('background-position').x;

// calc(100% - 10px) - as a CalcLength
document.querySelector('.example').styleMap.get('background-position').y;
</pre>

</div>

Mapping of properties to accepted types
=======================================
This section provides a table of which types of {{StyleValue}} a given property can accept.

<table>
<tr>
<td>
width
</td>
<td>
{{KeywordValue}} | {{LengthValue}}
</td>
</tr>
</table>

{{StyleValue}} normalization {#stylevalue-normalization}
========================================================

Issue: write me
